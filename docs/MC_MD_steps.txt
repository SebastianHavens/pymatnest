
``rej_free_perturb_velo``
    * if atom\_velo\_rej\_free\_fully\_randomize, pick random velocities consistent with Emax
    * else perturb velocities
        * if current velocity=0, can't rescale, so pick random velocities consistent with Emax
        * else, pick new random magnitude consistent with Emax, random rotation of current direction with angle uniform in +/- atom\_velo\_rej\_free\_perturb\_angle

``do\_MC\_atom\_velo\_walk``
    * Else if MC\_atom\_velo\_walk\_rej\_free
        * call rej\_free\_perturb\_velo()
    * else do MC pertubation to velocities

``do_MD_atom_walk``
    * if MD\_atom\_velo\_pre\_perturb, call do\_MC\_atom\_velo\_walk() for magnitude and rotation
    * propagate in time atom\_traj\_len time steps of length MD\_atom\_timestep
    * If MD\_atom\_reject\_energy\_violation is set, accept/reject entire move on E deviating by less than MD\_atom\_energy\_fuzz times kinetic energy
    * accept/reject entire move on E < Emax and KE < KEmax
    * if reject
        * set positions, velocities, energy back to value before perturbation (maybe should be after?)
    * else
        * flip velocities if MD\_atom\_velo\_flip\_accept
    * if MD\_atom\_velo\_post\_perturb, call do\_MC\_atom\_velo\_walk() for magnitude and rotation

``do_MC_atom_walk``
    * if MC\_atom\_velocities and MC\_atom\_velocities\_pre\_perturb, call do\_MC\_atom\_velo\_walk() to perturb velocities, magnitude and and rotation
    * if using fortran calculator and not reproducible
        * call fortran MC code f\_MC\_MD.MC\_atom\_walk
    * else
        * do python MC
        * if MC_atom_Galilean
            * go Galilean MC in python
        * else
            * loop atom\_traj\_len times
                * loop over atoms in random order
                    * propose single atom move
                    * accept/reject on E < Emax

``do_MC_swap_step``
    * return if all atomic numbers are identical
    * randomly pick a desired cluster size
    * pick two clusters with distinct atomic numbers, backing off to smaller clusters on failure to find appropriate larger clusters, but always pick at least a pair of atoms to swap
    * accept swap if energy < Emax

``do_MC_cell_volume_step``

``do_MC_cell_shear_step``

``do_MC_cell_stretch_step``

``do_atom_walk``
    * loop n\_atom\_steps\_per\_call times, calling do\_MC\_atom\_walk() or do\_MD\_atom\_walk()

``walk_single_walker``
        * create list
                            * do\_atom\_walk :math:`*` n\_atom\_step\_n\_calls
                            * do\_cell\_volume\_step :math:`*` n\_cell\_volume\_steps
                            * do\_cell\_shear\_step :math:`*` n\_cell\_shear\_steps
                            * do\_cell\_stretch\_step :math:`*` n\_cell\_stretch\_steps
                            * do\_swap\_step :math:`*` n\_swap\_steps
                            * do\_semi\_grand\_step :math:`*` n\_semi\_grand\_steps
        * loop while n\_model\_calls\_used < n\_model\_calls
            * pick random item from list
            * do move
    * perturb final energy by random\_energy\_perturbation

``full_auto_set_stepsizes``
    * Step sizes for each (H)MC move are set via a loop which performs additional exploration moves, calibrating each step size to obtain an acceptance rate inside a specified range. 
    * The routine is MPI parallelised, so that the wall time goes as 1/num\_of\_processes 
    * For each (H)MC move type the following is performed
        * Set ''movement\_args'' parameters so that only one (H)MC call is made at a time
        * Min and max acceptance rates are copied from parameters MC\_adjust\_min\_rate / MD\_adjust\_min\_rate and MC\_adjust\_max\_rate / MD\_adjust\_max\_rate
        * Step size calibration loop:
            * Repeat the following 200/num\_of\_MPI\_processes times:
                * Copy a configuration from the live set (each MPI process chooses a different configuration)
                * Each MPI processes performs one (H)MC move on its cloned configuration
                  running statistics for the number of accepted/rejected moves on each process are recorded 
            * The total number of accepted/rejected moves for this step size (summed across all MPI processes) are estabilshed
                * If the total acceptance rate is within the desired range, return this stepsize
                        * If this is NOT the first time the loop has been performed for this (H)MC move AND we previously obtained an acceptance rate on one side of the desired range, and now find an acceptance rate on the other side of the desired range
                            * Return the step size that gave an acceptance rate closest to the middle of the desired range.
                * Store step length and acceptance rate
                * update step length, by :math:`*` or :math:`/` by MC\_adjust\_step\_factor, to improve acceptance rate
                * Check that step size is not larger than max allowed value (specified by user), and also that step size is not smaller than 10\ :sup:`-20`\ (useful for detecting errors).
    * Return step sizes and time taken for routine to run
``main``: parse arguments
        * process n\_atom\_steps
            * If break\_up\_atom\_traj
                * n\_atom\_steps\_per\_call = 1
                * n\_atom\_steps\_n\_calls = n\_atom\_steps
            * else
                * n\_atom\_steps\_per\_call = n\_atom\_steps
                * n\_atom\_steps\_n\_calls = 1
